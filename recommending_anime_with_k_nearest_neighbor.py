# -*- coding: utf-8 -*-
"""Recommending Anime With K-Nearest Neighbor.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qS0Pj-jP-eBVPlyEVebV5YfP-oefyxc8

# Load the dataset
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import re
import seaborn as sns
# %matplotlib inline

import warnings
warnings.filterwarnings("ignore", category=DeprecationWarning)

# Mount Google Drive
from google.colab import drive
drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/PythonScripts/PythonScripts/Project/anime.csv'

anime = pd.read_csv(file_path)

anime.head(10)

anime.isnull().sum()

anime[anime['episodes']=='Unknown'].head(3)

anime.loc[(anime["type"]=="OVA") & (anime["episodes"]=="Unknown"),"episodes"] = "1"

anime.loc[(anime["type"] == "Movie") & (anime["episodes"] == "Unknown")] = "1"

anime["episodes"] = anime["episodes"].map(lambda x:np.nan if x=="Unknown" else x)

anime["episodes"].fillna(anime["episodes"].median(),inplace = True)

pd.get_dummies(anime[["type"]]).head()

anime["rating"] = anime["rating"].astype(float)
anime["rating"].fillna(anime["rating"].median(),inplace = True)
anime["members"] = anime["members"].astype(float)

# Scaling

anime_features = pd.concat([anime["genre"].str.get_dummies(sep=","),
                            pd.get_dummies(anime[["type"]]),
                            anime[["rating"]],anime[["members"]],anime["episodes"]],axis=1)
anime["name"] = anime["name"].map(lambda name:re.sub('[^A-Za-z0-9]+', " ", name))
anime_features.head()

anime_features.columns

anime_features.head(100)

from sklearn.preprocessing import MinMaxScaler

min_max_scaler = MinMaxScaler()
anime_features = min_max_scaler.fit_transform(anime_features)

np.round(anime_features,2)

"""# Fit Nearest Neighbor To Data"""

from sklearn.neighbors import NearestNeighbors

nbrs = NearestNeighbors(n_neighbors=6, algorithm='ball_tree').fit(anime_features)

distances, indices = nbrs.kneighbors(anime_features)

def get_index_from_name(name):
    return anime[anime["name"]==name].index.tolist()[0]

all_anime_names = list(anime["name"])

def get_id_from_partial_name(partial):
    for name in all_anime_names:
        if partial in name:
            print(name,all_anime_names.index(name))

""" print_similar_query can search for similar animes both by id and by name. """

def print_similar_animes(query=None,id=None):
    if id:
        for id in indices[id][1:]:
            print(anime.loc[id]["name"])
    if query:
        found_id = get_index_from_name(query)
        for id in indices[found_id][1:]:
            print(anime.loc[id]["name"])

"""# Query Examples"""

print_similar_animes(query="Naruto")

print_similar_animes("Noragami")

print_similar_animes("Mushishi")

print_similar_animes("Gintama")

print_similar_animes("Fairy Tail")

get_id_from_partial_name("Naruto")

print_similar_animes(id=719)

print_similar_animes("Kimi no Na wa ")